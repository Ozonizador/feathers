// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id             String    @id @default(uuid()) @db.Uuid
  slug           String    @unique
  name           String?
  surname        String?
  nationality    String?
  town           String?
  birthDate      DateTime? @db.Date
  gender         Int?
  description    String?
  languages      String[]
  phone          String?
  avatarUrl      String?
  favouriteRooms String[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  advertisements Advertisement[]
  notifications  Notification[]  @relation("notifications")
  reservations   Reservation[]   @relation("tenantReservations")

  conversationsAsHost   Conversation[] @relation("conversationsAsHost")
  conversationsAsTenant Conversation[] @relation("conversationsAsTenant")

  messages Message[] @relation("profileMessages")
  stays    Stay[]    @relation("tenantStays")

  @@map("profiles")
}

model Advertisement {
  id                String                   @id @default(uuid()) @db.Uuid
  slug              String                   @unique
  type              TypeRoom
  place             String
  street            String
  streetNumber      String
  floor             String?
  postalCode        String
  rooms             Int
  maxRooms          Int                      @default(1)
  beds              Int
  tenantNumber      Int
  bathrooms         Int
  title             String
  description       String
  typeFlexHost      HostFlexType
  typeHost          TypeHost
  photos            Json                     @default("{}")
  houseRules        Json
  aboutHouse        Json
  monthRent         Int
  extraPerHost      Int
  guaranteeValue    Int
  expenses          Json
  available         AdvertisementStatus
  hostLivesProperty Boolean
  verified          Boolean                  @default(false)
  hostId            String                   @db.Uuid
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  geom              Unsupported("geometry")? // requires sql first on prod when migrating

  host  Profile? @relation(fields: [hostId], references: [id])
  stays Stay[]   @relation("advertisementStays")

  reservations Reservation[] @relation("advertisementReservations")
  reports      Report[]      @relation("advertisementReports")

  @@map("advertisements")
}

enum HostFlexType {
  SUPER_FLEX
  FLEX
  MODERATE
  RIGID
}

enum TypeRoom {
  ENTIRE_SPACE
  SHARED_ROOM
  PRIVATE_ROOM
}

enum TypeHost {
  PROFISSIONAL
  PARTICULAR
}

enum AdvertisementStatus {
  AVAILABLE
  DISABLED
  NOT_AVAILABLE
}

model Reservation {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startDate       DateTime          @db.Date
  endDate         DateTime          @db.Date
  advertisement   Advertisement     @relation("advertisementReservations", references: [id], fields: [advertisementId])
  advertisementId String            @db.Uuid
  status          ReservationStatus

  tenant       Profile       @relation("tenantReservations", references: [id], fields: [tenantId])
  tenantId     String        @db.Uuid
  stay         Stay?         @relation("reservationStay", references: [id], fields: [stayId])
  stayId       String?       @db.Uuid
  Conversation Conversation? @relation("conversationOfReservation")

  @@map("reservations")
}

enum ReservationStatus {
  REQUESTED
  ACCEPTED
  REJECTED
  CHANGE_REQUESTED
  CHANGE_ACCEPTED
  CHANGE_REJECTED
}

model Review {
  id     String @id @default(uuid()) @db.Uuid
  stay   Stay   @relation("stayReview", references: [id], fields: [stayId])
  stayId String @unique @db.Uuid

  overallRating      Int
  locationRating     Int
  valueQualityRating Int
  landLordRating     Int
  comoditiesRating   Int
  publicReview       String
  privateReview      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Notification {
  id          String           @id @default(uuid()) @db.Uuid
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  title       String
  description String
  type        NotificationType
  profile     Profile          @relation("notifications", references: [id], fields: [profileId])
  profileId   String           @db.Uuid

  @@map("notifications")
}

enum NotificationType {
  STUDENT_EVALUATE_STAY
  STUDENT_RESERVATION_DECLINED
  STUDENT_RESERVATION_ACCEPTED
  STUDENT_UNIHOSTS_SUPPORT
  STUDENT_COMPLETE_PROFILE
  LANDLORD_RESERVATION_RECEIVED
  LANDLORD_UNIHOSTS_SUPPORT
  LANDLORD_NEW_REVIEW
  LANDLORD_COMPLETE_PROFILE
  LANDLORD_COMPLETE_ADVERT
  BLOG
}

model Conversation {
  id            String      @id @default(uuid()) @db.Uuid
  host          Profile     @relation("conversationsAsHost", references: [id], fields: [hostId])
  hostId        String      @db.Uuid
  tenant        Profile     @relation("conversationsAsTenant", references: [id], fields: [tenantId])
  tenantId      String      @db.Uuid
  reservation   Reservation @relation("conversationOfReservation", references: [id], fields: [reservationId])
  reservationId String      @unique @db.Uuid

  messages Message[] @relation("conversationMessages")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("conversations")
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversation   Conversation @relation("conversationMessages", references: [id], fields: [conversationId])
  conversationId String       @db.Uuid
  profile        Profile      @relation("profileMessages", references: [id], fields: [profileId])
  profileId      String       @db.Uuid

  @@map("messages")
}

model Report {
  id String @id @default(uuid()) @db.Uuid

  advertisement   Advertisement @relation("advertisementReports", references: [id], fields: [advertisementId])
  advertisementId String        @db.Uuid
  stay            Stay          @relation("stayReport", references: [id], fields: [stayId])
  stayId          String        @unique @db.Uuid
  description     String
  type            ReportsType

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("reports")
}

enum ReportsType {
  IMPRECISE
  NOT_REALITY
  SCAM
  OFFENSIVE
  OTHER
}

model Stay {
  id        String   @id @default(uuid()) @db.Uuid
  startDate DateTime
  endDate   DateTime
  report    Report?  @relation("stayReport")
  review    Review?  @relation("stayReview")

  advertisement   Advertisement @relation("advertisementStays", references: [id], fields: [advertisementId])
  advertisementId String        @db.Uuid
  tenant          Profile       @relation("tenantStays", references: [id], fields: [tenantId])
  tenantId        String        @db.Uuid

  reservations Reservation[] @relation("reservationStay")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("stays")
}

model Blog {
  id          String       @id @default(uuid()) @db.Uuid
  slug        String       @unique
  title       String
  description String
  image       String
  category    BlogCategory
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt

  @@map("blogs")
}

enum BlogCategory {
  LANDLORD
  TENANT
}
