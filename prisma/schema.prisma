// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id              String    @id @default(uuid()) @db.Uuid
  slug            String    @unique
  name            String?
  surname         String?
  nationality     String?
  town            String?
  birth_date      DateTime? @db.Date
  gender          Int?
  description     String?
  languages       String[]
  phone           String?
  avatar_url      String?
  favourite_rooms String[]
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now()) @updatedAt

  advertisements Advertisement[]
  notifications  Notification[]  @relation("notifications")
  reservations   Reservation[]   @relation("tenantReservations")

  conversations_as_host   Conversation[] @relation("conversationsAsHost")
  conversations_as_tenant Conversation[] @relation("conversationsAsTenant")

  messages Message[] @relation("profileMessages")
  stays    Stay[]    @relation("tenantStays")

  @@map("profiles")
}

model Advertisement {
  id                  String                   @id @default(uuid()) @db.Uuid
  slug                String                   @unique
  type                TypeRoom
  place               String
  street              String
  street_number       String
  floor               String?
  postal_code         String
  rooms               Int
  max_rooms           Int                      @default(1)
  beds                Int
  tenant_number       Int
  bathrooms           Int
  title               String
  description         String
  type_flex_host      HostFlexType
  type_host           type_host
  photos              Json                     @default("[]")
  house_rules         Json
  about_house         Json
  month_rent          Int
  extra_per_host      Int
  guarantee_value     Int
  expenses            Json
  available           AdvertisementStatus
  host_lives_property Boolean
  verified            Boolean                  @default(false)
  host_id             String                   @db.Uuid
  created_at          DateTime                 @default(now())
  updated_at          DateTime                 @default(now()) @updatedAt
  geom                Unsupported("geometry")? // requires sql first on prod when migrating

  host  Profile? @relation(fields: [host_id], references: [id])
  stays Stay[]   @relation("advertisementStays")

  reservations Reservation[] @relation("advertisementReservations")
  reports      Report[]      @relation("advertisementReports")

  @@map("advertisements")
}

enum HostFlexType {
  SUPER_FLEX
  FLEX
  MODERATE
  RIGID
}

enum TypeRoom {
  ENTIRE_SPACE
  SHARED_ROOM
  PRIVATE_ROOM
}

enum type_host {
  PROFISSIONAL
  PARTICULAR
}

enum AdvertisementStatus {
  AVAILABLE
  DISABLED
  NOT_AVAILABLE
}

model Reservation {
  id               String            @id @default(uuid()) @db.Uuid
  start_date       DateTime          @db.Date
  end_date         DateTime          @db.Date
  advertisement    Advertisement     @relation("advertisementReservations", references: [id], fields: [advertisement_id])
  advertisement_id String            @db.Uuid
  status           ReservationStatus
  tenant           Profile           @relation("tenantReservations", references: [id], fields: [tenant_id])
  tenant_id        String            @db.Uuid
  stay             Stay?             @relation("reservationStay", references: [id], fields: [stay_id])
  stay_id          String?           @db.Uuid
  Conversation     Conversation?     @relation("conversationOfReservation")
  created_at       DateTime          @default(now())
  updated_at       DateTime          @default(now()) @updatedAt

  @@map("reservations")
}

enum ReservationStatus {
  REQUESTED
  ACCEPTED
  REJECTED
  CHANGE_REQUESTED
  CHANGE_ACCEPTED
  CHANGE_REJECTED
}

model Review {
  id      String @id @default(uuid()) @db.Uuid
  stay    Stay   @relation("stayReview", references: [id], fields: [stay_id])
  stay_id String @unique @db.Uuid

  overall_rating       Int
  location_rating      Int
  value_quality_rating Int
  landlord_rating      Int
  comodities_rating    Int
  public_review        String
  private_review       String

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("reviews")
}

model Notification {
  id          String           @id @default(uuid()) @db.Uuid
  title       String
  description String
  type        NotificationType
  profile     Profile          @relation("notifications", references: [id], fields: [profile_id])
  profile_id  String           @db.Uuid
  created_at  DateTime         @default(now())
  updated_at  DateTime         @default(now()) @updatedAt

  @@map("notifications")
}

enum NotificationType {
  STUDENT_EVALUATE_STAY
  STUDENT_RESERVATION_DECLINED
  STUDENT_RESERVATION_ACCEPTED
  STUDENT_UNIHOSTS_SUPPORT
  STUDENT_COMPLETE_PROFILE
  LANDLORD_RESERVATION_RECEIVED
  LANDLORD_UNIHOSTS_SUPPORT
  LANDLORD_NEW_REVIEW
  LANDLORD_COMPLETE_PROFILE
  LANDLORD_COMPLETE_ADVERT
  BLOG
}

model Conversation {
  id             String      @id @default(uuid()) @db.Uuid
  host           Profile     @relation("conversationsAsHost", references: [id], fields: [host_id])
  host_id        String      @db.Uuid
  tenant         Profile     @relation("conversationsAsTenant", references: [id], fields: [tenant_id])
  tenant_id      String      @db.Uuid
  reservation    Reservation @relation("conversationOfReservation", references: [id], fields: [reservation_id])
  reservation_id String      @unique @db.Uuid
  messages       Message[]   @relation("conversationMessages")
  created_at     DateTime    @default(now())
  updated_at     DateTime    @default(now()) @updatedAt

  @@map("conversations")
}

model Message {
  id              String       @id @default(uuid()) @db.Uuid
  message         String
  conversation    Conversation @relation("conversationMessages", references: [id], fields: [conversation_id])
  conversation_id String       @db.Uuid
  profile         Profile      @relation("profileMessages", references: [id], fields: [profile_id])
  profile_id      String       @db.Uuid
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now()) @updatedAt

  @@map("messages")
}

model Report {
  id               String        @id @default(uuid()) @db.Uuid
  advertisement    Advertisement @relation("advertisementReports", references: [id], fields: [advertisement_id])
  advertisement_id String        @db.Uuid
  stay             Stay          @relation("stayReport", references: [id], fields: [stay_id])
  stay_id          String        @unique @db.Uuid
  description      String
  type             ReportsType
  created_at       DateTime      @default(now())
  updated_at       DateTime      @default(now()) @updatedAt

  @@map("reports")
}

enum ReportsType {
  IMPRECISE
  NOT_REALITY
  SCAM
  OFFENSIVE
  OTHER
}

model Stay {
  id               String        @id @default(uuid()) @db.Uuid
  start_date       DateTime
  end_date         DateTime
  report           Report?       @relation("stayReport")
  review           Review?       @relation("stayReview")
  advertisement    Advertisement @relation("advertisementStays", references: [id], fields: [advertisement_id])
  advertisement_id String        @db.Uuid
  tenant           Profile       @relation("tenantStays", references: [id], fields: [tenant_id])
  tenant_id        String        @db.Uuid
  reservations     Reservation[] @relation("reservationStay")
  created_at       DateTime      @default(now())
  updated_at       DateTime      @default(now()) @updatedAt

  @@map("stays")
}

model Blog {
  id          String       @id @default(uuid()) @db.Uuid
  slug        String       @unique
  title       String
  description String
  image       String
  category    BlogCategory
  created_at  DateTime     @default(now())
  updated_at  DateTime     @default(now()) @updatedAt

  @@map("blogs")
}

enum BlogCategory {
  LANDLORD
  TENANT
}
