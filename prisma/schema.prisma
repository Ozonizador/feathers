// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id             String    @id @default(uuid()) @db.Uuid
  name           String?
  surname        String?
  nationality    String?
  town           String?
  birthDate      DateTime?
  gender         Int?
  description    String?
  languages      String[]
  phone          String?
  avatarUrl      String?
  favouriteRooms String[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  advertisements Advertisement[]
  tenantReviews  Review[]        @relation("tenantReviews")
  notifications  Notification[]  @relation("notifications")
  reservations   Reservations[]  @relation("tenantReservations")

  conversationsAsHost   Conversation[] @relation("conversationsAsHost")
  conversationsAsTenant Conversation[] @relation("conversationsAsTenant")

  messages Message[] @relation("profileMessages")

  @@map("profiles")
}

model Advertisement {
  id                String       @id @default(uuid()) @db.Uuid
  type              TypeRoom
  place             String
  street            String
  streetNumber      String
  floor             String?
  postalCode        String
  rooms             Int
  beds              Int
  tenantNumber      Int
  bathrooms         Int
  title             String
  description       String
  typeFlexHost      HostFlexType
  typeHost          TypeHost
  photos            String[]
  houseRules        Json
  aboutHouse        Json
  monthRent         Int
  extraPerHost      Int
  guaranteeValue    Int
  expenses          Json
  hostLivesProperty Boolean
  host              String       @db.Uuid
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  Profile Profile? @relation(fields: [host], references: [id])
  Review  Review[] @relation("advertisementReviews")

  Reservations Reservations[] @relation("advertisementReservations")

  @@map("advertisements")
}

enum HostFlexType {
  SUPER_FLEX
  FLEX
  MODERATE
  RIGID
}

enum TypeRoom {
  ENTIRE_SPACE
  SHARED_ROOM
  PRIVATE_ROOM
}

enum TypeHost {
  PROFISSIONAL
  PARTICULAR
}

model Reservations {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startDate       DateTime
  endDate         DateTime
  advertisement   Advertisement     @relation("advertisementReservations", references: [id], fields: [advertisementId])
  advertisementId String            @db.Uuid
  status          ReservationStatus

  tenant   Profile @relation("tenantReservations", references: [id], fields: [tenantId])
  tenantId String  @db.Uuid

  @@map("reservations")
}

enum ReservationStatus {
  REQUESTED
  ACCEPTED
  REJECTED
}

model Review {
  id            String        @id @default(uuid()) @db.Uuid
  advertisement Advertisement @relation("advertisementReviews", references: [id], fields: [advertisementId])
  tenant        Profile       @relation("tenantReviews", references: [id], fields: [tenantId])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  overallRating      Int
  locationRating     Int
  valueQualityRating Int
  landLordRating     Int
  comoditiesRating   Int
  publicReview       String
  privateReview      String
  advertisementId    String @db.Uuid
  tenantId           String @db.Uuid

  @@map("reviews")
}

model Notification {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String
  url         String
  profile     Profile  @relation("notifications", references: [id], fields: [profileId])
  profileId   String   @db.Uuid

  @@map("notifications")
}

model Conversation {
  id       String  @id @default(uuid()) @db.Uuid
  host     Profile @relation("conversationsAsHost", references: [id], fields: [hostId])
  hostId   String  @db.Uuid
  tenant   Profile @relation("conversationsAsTenant", references: [id], fields: [tenantId])
  tenantId String  @db.Uuid

  messages Message[] @relation("conversationMessages")

  @@map("conversations")
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversation   Conversation @relation("conversationMessages", references: [id], fields: [conversationId])
  conversationId String       @db.Uuid
  profile        Profile      @relation("profileMessages", references: [id], fields: [profileId])
  profileId      String       @db.Uuid

  @@map("messages")
}
